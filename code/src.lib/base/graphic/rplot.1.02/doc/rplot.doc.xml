<?xml version="1.0" encoding="ISO-8859-1"?>

<library>
<name>rplot</name>
<location>src.lib/base/graphic/rplot</location>
<function>
<name>RplotBezier</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotBezier(<sn href="structRplot.html">struct Rplot</sn> *ptr, float x1,float y1,float x2,float y2, float x3,float y3,float x4,float y4, unsigned int color,unsigned char mask,float width, <sn href="structRplotDash.html">struct RplotDash</sn> *dash);</syntax>
<description><p>The <fn href="RplotBezier.html">RplotBezier</fn> function plots a bezier curve.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p> 
<p>The coordinates of the four points that define the bezier curve are given by the arguments
<ar>x1</ar>, <ar>y1</ar>,<ar>x2</ar>, <ar>y2</ar>,<ar>x2</ar>, <ar>y3</ar>, and <ar>x4</ar>, <ar>y4</ar>. The two end points are defined by <ar>x1</ar>, <ar>y1</ar> and <ar>x4</ar>,<ar>y4</ar>. The other two coordinates are the control points.</p>

<p>The color used to plot the curve is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit numbers. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to 0x0f will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the curve is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>

</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">RplotBezier</example>
<example type="source">RplotBezier.c</example>


</function>
<function>
<name>RplotClip</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotClip(<sn href="structRplot.html">struct Rplot</sn> *ptr, int num,float *px,float *py,int *t);</syntax>

<description><p>The <fn href="RplotClip.html">RplotClip</fn> function defines a clipping polygon.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
<p>The number of vertices of the clipping polygon is given by the argument <ar>num</ar>. The arrays containing the X and Y coordinates of each vertex are pointed to by the arguments <ar>x</ar> and <ar>y</ar>.</p>
<p>A polygon can be constructed from straight line segments or bezier curves. The array pointed to by the argument <ar>t</ar> determines what kind of line segment is used to join to a vertex. If the corresponding entry in the array equals zero, then the segment between the current point and the next point is a straight line; if the entry is (1) then the connecting segment is a bezier curve and the next two vertices are the control points, the curve connects to the third point.</p> 
<p>Once the clipping polygon is defined, plot operations are clipped to the perimeter of the polygon.</p>
<p>To release the clipping polygon and return to regular plotting, call this function with the <ar>num</ar> argument set to zero.</p> 
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">RplotClip</example>
<example type="source">RplotClip.c</example>


</function>
<function>
<name>RplotColor</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>unsigned int RplotColor(int r,int g,int b,int a);</syntax>
<description><p>The <fn href="RplotColor.html">RplotColor</fn> function creates an integer representation of a color.</p>
<p>The red, green, blue and alpha component of the color are given by the arguments <ar>r</ar>, <ar>g</ar>, <ar>b</ar> and <ar>a</ar>. The values of these arguments range from zero to (255).</p>
</description>
<returns>Returns an integer representation of the color on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">RplotColor</example>
<example type="source">RplotColor.c</example>


</function>
<function>
<name>RplotColorStringRGB</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>unsigned int RplotColorStringRGB(char *txt);</syntax>
<description><p>The <fn href="RplotColor.html">RplotColor</fn> function creates an integer representation of a color from a text string.</p>
<p>The zero terminated text string containing the hexadecimal representation of the color is pointed to by the argument <ar>txt</ar>.</p>
<p>The text string should be a hexadecimal representation of a 24-bit number. The most significant eight bits give the red component and the least significant give the blue component.</p>
</description>
<returns>Returns an integer representation of the color on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">RplotColorStringRGB</example>
<example type="source">RplotColorStringRGB.c</example>



</function>
<function>
<name>RplotColorStringRGBA</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>unsigned int RplotColorStringRGBA(char *txt);</syntax>

<description><p>The <fn href="RplotColor.html">RplotColor</fn> function creates an integer representation of a color from a text string.</p>
<p>The zero terminated text string containing the hexadecimal representation of the color is pointed to by the argument <ar>txt</ar>.</p>
<p>The text string should be a hexadecimal representation of a 32-bit number. The most significant eight bits give the alpha component and the least significant give the blue component.</p>
</description>
<returns>Returns an integer representation of the color on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">RplotColorStringRGBA</example>
<example type="source">RplotColorStringRGBA.c</example>


</function>
<function>
<name>RplotEllipse</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotEllipse(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y,float w,float h, int fill,unsigned int color,unsigned char mask, float width, <sn href="structRplotDash.html">struct RplotDash</sn> *dash);</syntax>

<description><p>The <fn href="RplotEllipse.html">RplotEllipse</fn> function plots an ellipse.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the ellipse. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position of the center of the ellipse is given by the arguments <ar>x</ar>, and <ar>y</ar>. The horizontal and vertical radii are given by the arguments <ar>w</ar> and <ar>h</ar>.</p>
<p>If the argument <ar>fill</ar> is set to a non-zero value then the ellipse will be plotted as a solid shape, not an outline.</p>
<p>The color used to plot the rectangle is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the ellipse is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the ellipse is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotEllipse</example>
<example type="source">RplotEllipse.c</example>
</function>

<function>
<name>RplotEmbed</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotEmbed(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y);</syntax>


<description><p>The <fn href="RplotEmbed.html">RplotEmbed</fn> function embeds an <code>Rplot</code> plot within a plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the embedded. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position to locate the bottom right hand corner of the embedded plot is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>Once this function is called, the subsequent data in the stream must consist of a valid, complete <code>rPlot</code> plot. Once the embedded plot is completed, the embedding is terminated by calling <fn href="RplotEndEmbed.html">RplotEndEmbed</fn>.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotEmbed</example>
<example type="source">RplotEmbed.c</example>


</function>
<function>
<name>RplotEndEmbed</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotEndEmbed(<sn href="structRplot.html">struct Rplot</sn> *ptr);</syntax>


<description><p>The <fn href="RplotEndEmbed.html">RplotEndEmbed</fn> function ends an embedded <code>Rplot</code> plot within a plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotEmbedEnd</example>
<example type="source">RplotEmbedEnd.c</example>


</function>
<function>
<name>RplotEndInfo</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotEndInfo(<sn href="structRplot.html">struct Rplot</sn> *ptr);</syntax>

<description><p>The <fn href="RplotEndInfo.html">RplotEndInfo</fn> function ends a meta-data section of a  <code>Rplot</code> plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotEndInfo</example>
<example type="source">RplotEndInfo.c</example>


</function>
<function>
<name>RplotEndPlot</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotEndPlot(<sn href="structRplot.html">struct Rplot</sn> *ptr);</syntax>


<description><p>The <fn href="RplotEndPlot.html">RplotEndPlot</fn> function ends an <code>Rplot</code> plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotEndPlot</example>
<example type="source">RplotEndPlot.c</example>


</function>
<function>
<name>RplotFree</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>void RplotFree(<sn href="structRplot.html">struct Rplot</sn> *ptr);</syntax>

<description><p>The <fn href="RplotFree.html">RplotFree</fn> function releases memory allocated for an <code>Rplot</code> control structure.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
</description>

<example type="rplot">RplotFree</example>
<example type="source">RplotFree.c</example>


</function>
<function>
<name>RplotFreeDash</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>void RplotFreeDash(<sn href="structRplotDash.html">struct RplotDash</sn> *ptr);</syntax>
<description><p>The <fn href="RplotFreeDash.html">RplotFreeDash</fn> function releases memory allocated for an <code>Rplot</code> dash pattern.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> dash pattern.</p>
</description>

<example type="rplot">RplotFreeDash</example>
<example type="source">RplotFreeDash.c</example>

</function>
<function>
<name>RplotImage</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotImage(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix,<sn href="&root;/src.lib/base/graphic/fbuffer/structFrameBuffer.html">struct FrameBuffer *img</sn>, unsigned char mask, float x,float y,int sflg);</syntax>

<description><p>The <fn href="RplotImage.html">RplotImage</fn> function plots a bitmap image.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the bitmap. If this is set to a <code>NULL</code> pointer then no transformation is applied.</p>
<p>The bitmap image is pointed to by the argument <ar>img</ar>.</p>
<p>The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The position of the top-left hand corner of the bitmap is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The argument <ar>sflg</ar> is a flag that determines whether interpolation is used to smooth the image; if this argument is set to a non-zero value then interpolation is used.</p>
<p>The function converts the bitmap into an XML representation of an image and writes it to the stream.</p>  
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotImage</example>
<example type="source">RplotImage.c</example>


</function>
<function>
<name>RplotImageName</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotImageName(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, char *name, unsigned char mask, float x,float y,int sflg);</syntax>
<description><p>The <fn href="RplotImageName.html">RplotImageName</fn> function plots a bitmap image by using a name reference.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the bitmap. If this is set to a <code>NULL</code> pointer then no transformation is applied.</p>
<p>The name of the bitmap to plot is given by the zero terminated string  <ar>name</ar>.</p>
<p>The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The position of the top-left hand corner of the bitmap is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The argument <ar>sflg</ar> is a flag that determines whether interpolation is used to smooth the image; if this argument is set to a non-zero value then interpolation is used.</p>
<p>The function plots the bitmap by including a name reference in the stream. The renderer uses this name reference to locate the actual bitmap image in an image database.</p>  
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="source">RplotImageName.c</example>


</function>
<function>
<name>RplotInclude</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotInclude(<sn href="structRplot.html">struct Rplot</sn> *ptr,char *name);</syntax>
<description><p>The <fn href="RplotInclude.html">RplotInclude</fn> function inserts a redirect command into an <code>rPlot</code> plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
<p>The argument <ar>name</ar> is the name of the redirect.</p>
<p>Usually the name of the redirect is the name of a file or URL. When the renderer encounters the redirect command it should stop processing the command stream and instead process commands from this source. Once the new stream is exhausted, the renderer continues processing the original stream.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="source">RplotInclude.c</example>


</function>
<function>
<name>RplotInfo</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotInfo(<sn href="structRplot.html">struct Rplot</sn> *ptr,char *buf,int sze);</syntax>
<description><p>The <fn href="RplotInfo.html">RplotInfo</fn> inserts meta-data into a <code>Rplot</code> plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
<p>The meta-data is taken from the memory buffer pointed to by the argument <ar>buf</ar>. The number of bytes to copy is given by the argument <ar>sze.</ar>.</p>
<p>The meta-data section must be initialized by calling <fn href="RplotStartInfo.html">RplotStartInfo</fn> prior to calling this function.</p>
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotInfo</example>
<example type="source">RplotInfo.c</example>


</function>
<function>
<name>RplotLine</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotLine(<sn href="structRplot.html">struct Rplot</sn> *ptr, float ax,float ay,float bx,float by, unsigned int color,unsigned char mask,float width, <sn href="structRplotDash.html">struct RplotDash</sn> *dash);</syntax>

<description><p>The <fn href="RplotLine.html">RplotLine</fn> function plots a straight line segment.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p> 
<p>The coordinates of the two points that define the line are given by the arguments <ar>ax</ar>, <ar>ay</ar>, and <ar>bx</ar>, <ar>by</ar>.</p>
<p>The color used to plot the line is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit numbers. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to 0x0f will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>

</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotLine</example>
<example type="source">RplotLine.c</example>


</function>
<function>
<name>RplotMake</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax><sn href="structRplot.html">struct Rplot</sn> *RplotMake();</syntax>

<description><p>The <fn href="RplotMake.html">RplotMake</fn> function initializes an <code>Rplot</code> control structure.</p>
</description>
<returns>Returns a pointer to the control structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="rplot">RplotMake</example>
<example type="source">RplotMake.c</example>


</function>
<function>
<name>RplotMakeDash</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax><sn href="structRplotDash.html">struct RplotDash</sn> *RplotMakeDash(float *p,float phase,int sze);</syntax>
<description><p>The <fn href="RplotMakeDash.html">RplotMakeDash</fn> function makes a dash pattern for an <code>Rplot</code> plot.</p>
<p>The array pointed to by the argument <ar>p</ar> is interpreted as distances along the line that alternately specify dashes and gaps. The argument <ar>sze</ar> give the number of elements in the array.</p>
<p>When a dashed line is plotted an element is read from the array and a dash of length equal to that value is drawn. A gap equal to the value of the next element is then left and the process is repeated until the end of the line is reached, cycling through the array as necessary.</p>
<p>The argument <ar>phase</ar> specifies the initial element to use from the array.</p>
</description>
<returns>Returns a pointer to the dash structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="rplot">RplotMakeDash</example>
<example type="source">RplotMakeDash.c</example>


</function>
<function>
<name>RplotMakeDashString</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax><sn href="structRplotDash.html">struct RplotDash</sn> *RplotMakeDashString(char *str);</syntax>

<description><p>The <fn href="RplotMakeDashString.html">RplotMakeDashString</fn> function makes a dash pattern for an <code>Rplot</code> plot from a text string.</p>
<p>The argument <ar>str</ar> is the zero terminated string of space separated numbers that defines the dash pattern.</p>
<p>The first number in the string is a phase offset. The subsequent numbers are interpreted as distances along the line that alternately specify dashes and gaps.</p>
<p>When a dashed line is plotted an element is read from the array and a dash of length equal to that value is drawn. A gap equal to the value of the next element is then left and the process is repeated until the end of the line is reached, cycling through the array as necessary.</p>
<p>The phase specifies the initial element to use from the array.</p>
</description>

<returns>Returns a pointer to the dash structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="rplot">RplotMakeDashString</example>
<example type="source">RplotMakeDashString.c</example>


</function>
<function>
<name>RplotMakePlot</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotMakePlot(<sn href="structRplot.html">struct Rplot</sn> *ptr,char *name, float wdt,float hgt,int depth);</syntax>
<description><p>The <fn href="RplotMakePlot.html">RplotMakePlot</fn> function opens an <code>Rplot</code> plot.</p>
<p>The name of the plot is given by the zero terminated string pointed to by the argument <ar>name</ar>.</p>
<p>The size of the plot is given by the arguments <ar>wdt</ar> and <ar>hgt</ar>.</p>
<p>The bitdepth of the plot is given by the argument <ar>depth</ar>. How this is interpreted is up to the renderer.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotMakePlot</example>
<example type="source">RplotMakePlot.c</example>


</function>
<function>
<name>RplotMatrixMultiply</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotMatrixMultiply(<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *x,<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *y, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *z);</syntax>
<description><p>The <fn href="RplotMatrixMultiply.html">RplotMatrixMultiply</fn> function multiplies two transformation matrices together.</p>
<p>The two matrices to multiply together are pointed to by the arguments <ar>x</ar> and <ar>y</ar>. The product of the two matrices is stored in the structure pointed to by the argument <ar>z</ar>.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotMatrixMultiply</example>
<example type="source">RplotMatrixMultiply.c</example>


</function>
<function>
<name>RplotMatrixString</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax><sn href="structRplotMatrix.html">struct RplotMatrix</sn> *RplotMatrixString(char *str);</syntax>

<description><p>The <fn href="RplotMatrixString.html">RplotMatrixString</fn> function creates a transformation matrix from a text string.</p>
<p>The argument <ar>str</ar> is the zero terminated string of space separated numbers that defines the matrix. The first number gives the top-left value, the second, the top-right value, the third, the bottom-left value, and the fourth gives the bottom right value.</p>

</description>

<returns>Returns a pointer to the matrix structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="rplot">RplotMatrixString</example>
<example type="source">RplotMatrixString.c</example>


</function>
<function>
<name>RplotMatrixTransform</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotMatrixTransform(<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *ptr,float ix,float iy, float *ox,float *oy);</syntax>

<description><p>The <fn href="RplotMatrixTransform.html">RplotMatrixTransform</fn> function performs a matrix transformation on a point.</p>
<p>The argument <ar>ptr</ar> is a pointer to the transformation matrix. The arguments <ar>ix</ar> and <ar>iy</ar> give the coordinates of the point to transform.</p>
<p>The coordinates of the point after the transformation are stored at the locations pointed to by the arguments <ar>ox</ar> and <ar>oy</ar>.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotMatrixTransform</example>
<example type="source">RplotMatrixTransform.c</example>

</function>
<function>
<name>RplotPolygon</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotPolygon(<sn href="structRplot.html">struct Rplot</sn> *ptr,<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y, int num,float *px,float *py,int *t,int fill, unsigned int color,unsigned char mask,float width, <sn href="structRplotDash.html">struct RplotDash</sn> *dash);</syntax>
<description><p>The <fn href="RplotPolygon.html">RplotPolygon</fn> function plots a polygon.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure . The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the polygon. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the polygon is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The number of vertices of the polygon is given by the argument <ar>num</ar>. The arrays containing the X and Y coordinates of each vertex are pointed to by the arguments <ar>x</ar> and <ar>y</ar>.</p>
<p>A polygon can be constructed from straight line segments or bezier curves. The array pointed to by the argument <ar>t</ar> determines what kind of line segment is used to join to a vertex. If the corresponding entry in the array equals zero, then the segment between the current point and the next point is a straight line; if the entry is (1) then the connecting segment is a bezier curve and the next two vertices are the control points, the curve connects to the third point.</p> 
<p>If the argument <ar>fill</ar> is set to a non-zero value then the polygon will be plotted as solid shape, not an outline.</p>
<p>The color used to plot the polygon is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the polygon is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the polygon is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>Returns zero on success. On error, (-1) is returned.</errors>

<example type="rplot">RplotPolygon</example>
<example type="source">RplotPolygon.c</example>


</function>
<function>
<name>RplotRectangle</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotRectangle(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, float x,float y,float w,float h, int fill,unsigned int color,unsigned char mask, float width, <sn href="structRplotDash.html">struct RplotDash</sn> *dash);</syntax>
<description><p>The <fn href="RplotRectangle.html">RplotRectangle</fn> function plots a rectangle.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the rectangle. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the rectangle is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>. The width and height of the rectangle are given by the arguments <ar>w</ar> and <ar>h</ar>.</p>
<p>If the argument <ar>fill</ar> is set to a non-zero value then the rectangle will be plotted as a solid shape, not an outline.</p>
<p>The color used to plot the rectangle is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The width of the line used to plot the rectangle is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the rectangle is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>Returns zero on success. On error, (-1) is returned.</errors>

<example type="rplot">RplotRectangle</example>
<example type="source">RplotRectangle.c</example>


</function>
<function>
<name>RplotRotateMatrix</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotRotateMatrix(<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *ptr, float angle);</syntax>
<description><p>The <fn href="RplotRotateMatrix.html">RplotRotateMatrix</fn> function rotates a transformation matrix.</p>
<p>The matrix to rotate is pointed to by the argument  <ar>ptr</ar>. The angle in degrees to rotate the matrix is given by the argument <ar>angle</ar>.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotRotateMatrix</example>
<example type="source">RplotRotateMatrix.c</example>


</function>
<function>
<name>RplotScaleMatrix</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotScaleMatrix(<sn href="structRplotMatrix.html">struct RplotMatrix</sn> *ptr, float xscale,float yscale);</syntax>

<description><p>The <fn href="RplotScaleMatrix.html">RplotScaleMatrix</fn> function scales a transformation matrix.</p>
<p>The matrix to scale is pointed to by the argument  <ar>ptr</ar>. The X and Y scale factors are given by the arguments <ar>xscale</ar> and <ar>yscale</ar>.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotScaleMatrix</example>
<example type="source">RplotScaleMatrix.c</example>


</function>
<function>
<name>RplotSetText</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotSetText(<sn href="structRplot.html">struct Rplot</sn> *ptr,int (*text)(char *,int,void *),void *data);</syntax>

<description><p>The <fn href="RplotSetText.html">RplotSetText</fn> function sets the text stream handler in the  <code>Rplot</code> control structure.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
<p>The argument <ar>text</ar> is a pointer to a function of the form:</p>
<fd>
int (*text) (char *buffer,int size,void *dptr);
</fd>
<p>This function is called each time an <code>Rplot</code> command is sent to the text stream.</p>
<p>The argument <ar>buffer</ar> is a pointer to a buffer containing the text of the command and the argument <ar>size</ar> indicates the size of the buffer.</p>
<p>The <ar>data</ar> argument of the <fn href="RplotSetText.html">RplotSetText</fn> function  is passed directly as the <ar>dptr</ar> argument and allows extra parameters to be passed to the function.</p>
<p>The text stream handler usually writes the text it receives to a file or alternatively sends the text to a renderer that creates a final plot.</p>

</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotSetText</example>
<example type="source">RplotSetText.c</example>


</function>
<function>
<name>RplotStartInfo</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotStartInfo(<sn href="structRplot.html">struct Rplot</sn> *ptr);</syntax>


<description><p>The <fn href="RplotStartInfo.html">RplotStartInfo</fn> function starts a meta-data section of a  <code>Rplot</code> plot.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotStartInfo</example>
<example type="source">RplotStartInfo.c</example>



</function>
<function>
<name>RplotText</name>
<location>src.lib/base/graphic/rplot</location>
<header>base/rplot.h</header>
<syntax>int RplotText(<sn href="structRplot.html">struct Rplot</sn> *ptr, <sn href="structRplotMatrix.html">struct RplotMatrix</sn> *matrix, char *fname,float fsize, float x,float y,int num,char *txt, unsigned int color,unsigned char mask, int sflg);</syntax>



<description><p>The <fn href="RplotText.html">RplotText</fn> function plots text.</p>
<p>The argument <ar>rplot</ar> is a pointer to the <code>Rplot</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the rectangle. If this is set to a <code>NULL</code> pointer then no transformation is applied.</p>
<p>The zero terminated string pointed to by the argument <ar>fname</ar> gives thhe name of the font. The size of the font is given by the argument <ar>fsize</ar>.</p>
<p>The position at which the text is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The number of character to plot is given by the argument <ar>num</ar>, and the characters are taken from the array pointed to by the argument <ar>txt</ar>.</p>
<p>The color used to plot the text is given by the <ar>color</ar> which is a 32-bit number that represents the alpha,red,green and blue components of the color as 8-bit number. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits. The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The argument <ar>sflg</ar> determines whether interpolation is used to smooth the image; if this argument is set to a non-zero value then interpolation is used.</p>

</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="rplot">RplotText</example>
<example type="source">RplotText.c</example>



</function>


<structure>
 <name>Rplot</name>
 <location>src.lib/base/graphic/rplot</location>
 <header>base/rplot.h</header>
 <struct>
    <member>
      <struct>
         <member>
           <code>int (*user)(char *buf,int sze,void *data);</code>
           <description>Function called to handle the text stream.</description>
         </member>
         <member>
           <code>void *data;</code>
           <description>Pointer to a block of memory passed as the last argument to the text stream handler.</description>
         </member>
       </struct>
       <code>text;</code>
       <description>Text stream handler.</description>
    </member>
  </struct>
<description>
<p>The <sn href="structRplot.html">struct Rplot</sn> structure stores a control structure for an Rplot plot.</p>
</description>
</structure>

<structure>
 <name>RplotDash</name>
 <location>src.lib/base/graphic/rplot</location>
 <header>base/rplot.h</header>
 <struct>
    <member>
      <code>float *p;</code>
      <description>Pointer to an array of line segment lengths.</description>
    </member>
    <member>
      <code>int sze;</code>
      <description>Number of entries in the array of line segment lengths.</description>
    </member>
    <member>
      <code>float phase;</code>
      <description>Current position in the array of line segment lengths.</description>
    </member>
 </struct>
<description>
<p>The <sn href="structRplotDash.html">struct RplotDash</sn> structure stores a dash pattern for an Rplot plot.</p>
</description>
</structure>

<structure>
 <name>RplotMatrix</name>
 <location>src.lib/base/graphic/rplot</location>
 <header>base/rplot.h</header>
 <struct>
    <member>
      <code>float a;</code>
      <description>Top-left matrix cell.</description>
    </member>
    <member>
      <code>float b;</code>
      <description>Top-right matrix cell.</description>
    </member>
    <member>
      <code>float c;</code>
      <description>Bottom-left matrix cell.</description>
    </member>
    <member>
      <code>float d;</code>
      <description>Bottom-right matrix cell.</description>
    </member>
  </struct>

<description>
<p>The <sn href="structRplotMatrix.html">struct RplotMatrix</sn> structure stores a transformation matrix for an Rplot plot.</p>
</description>

</structure>



</library>
