<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<name>fitacf</name>
<location>src.lib/superdarn/fitacf</location>
<function>
<name>FitACF</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/fitacf.h</header>
<syntax>void FitACF(<sn href="&root;/src.lib/superdarn/radar/structRadarParm.html">struct RadarParm</sn> *prm,<sn href="&root;/src.lib/superdarn/raw/structRawData.html">struct RawData</sn> *ptr,<sn href="structFitBlock.html">struct FitBlock</sn> *input,<sn href="&root;/src.lib/superdarn/fit/structFitData.html">struct FitData</sn> *fit);</syntax>
<description><p>The <fn href="FitACF.html">FitACF</fn> function applies the <em>fitacf</em> algorithm to raw ACF data.</p>
<p>The argument <ar>prm</ar> points to the radar parameter block of the data to process and the argument <ar>raw</ar> points to the raw ACF data.</p>
<p>The configuration used by the algorithm is stored in the structure pointed to by the argument <ar>input</ar>.</p>
<p>The calculated, fitted parameters are stored in the structure pointed to by the argument <ar>fit</ar>.</p>
</description>
<example type="source">FitACF.c</example>
</function>


<function>
<name>FitACFBadLags</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/badlags.h</header>
<syntax>void FitACFBadLags(<sn href="structFitPrm.html">struct FitPrm</sn> *ptr,
<sn href="structFitACFBadSample.html">struct FitACFBadSample</sn> *bptr);</syntax>
<description><p>The <fn href="FitACFBadLags.html">FitACFBadLags</fn> function finds samples that should be excluded from the analysis as they result in a bad lag in the ACF.</p>
<p>The argument <ar>ptr</ar> points to the data structure containing the parameters used by the <em>fitacf</em> algorithm.</p>
<p>The calculated bad samples are stored in the structure pointed to by <ar>bptr</ar>.</p>
</description>
<example type="source">FitACFBadLags.c</example>

</function>



<function>
<name>FitACFBadLagsStereo</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/badlags.h</header>
<syntax>void FitACFBadLagsStereo(<sn href="structFitPrm.html">struct FitPrm</sn> *ptr,
<sn href="structFitACFBadSample.html">struct FitACFBadSample</sn> *bptr);</syntax>
<description><p>The <fn href="FitACFBadLags.html">FitACFBadLags</fn> function finds samples from a radar operating in stereo mode that should be excluded from the analysis as they result in a bad lag in the ACF.</p>
<p>The argument <ar>ptr</ar> points to the data structure containing the parameters used by the <em>fitacf</em> algorithm.</p>
<p>The calculated bad samples are stored in the structure pointed to by <ar>bptr</ar>.</p>
</description>
<example type="source">FitACFBadLagsStereo.c</example>

</function>

<function>
<name>FitACFCkRng</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/badlags.h</header>
<syntax>void FitACFCkRng(int range,int *badlag,<sn href="structFitACFBadSample.html">struct FitACFBadSample</sn> *bptr,<sn href="structFitPrm.html">struct FitPrm</sn> *ptr);</syntax>
<description><p>The <fn href="FitACFCkRng.html">FitACFCkRng</fn> function determines the bad lags for an ACF at a given range.</p>
<p>The badlags are found for the range given by the argument <ar>range</ar>. The calculated bad lags are stored in the array pointed to by the argument <ar>badlag</ar>.</p>
<p>The lags are found using the table of bad samples pointed to by the argument <ar>bptr</ar> and the parameters of the <em>fitacf</em> algorithm pointed to by the argument <ar>ptr</ar>.</p>
</description>
<example type="source">FitACFCkRng.c</example>

</function>



<function>
<name>FitACFEnd</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/fitacf.h</header>
<syntax>void FitACFEnd(<sn href="structFitBlock.html">struct FitBlock</sn> *fptr);</syntax>
<description><p>The <fn href="FitACFEnd.html">FitACFEnd</fn> function frees memory allocated for the <em>fitacf</em> algorithm.</p>
<p>The argument <ar>fptr</ar> points to the data structure containing the memory buffers used by the algorithm.</p>
</description>
<example type="source">FitACFEnd.c</example>

</function>
<function>
<name>FitACFStart</name>
<location>src.lib/superdarn/fitacf</location>
<header>superdarn/fitacf.h</header>
<syntax>void FitACFStart(<sn href="&root;/src.lib/superdarn/radar/structRadarSite.html">struct RadarSite</sn> *hd,int yr,<sn href="structFitBlock.html">struct FitBlock</sn> *fptr);</syntax>
<description><p>The <fn href="FitACFStart.html">FitACFStart</fn> function sets up a data structure in preparation for using the <em>fitacf</em> algorithm.</p>
<p>The argument <ar>site</ar> points to the site hardware configuration for the radar. The argument <ar>yr</ar> is the year that the raw ACF data was generated.</p>
<p>The data structure to set up is pointed to by the argument <ar>fptr</ar>.</p></description>
<example type="source">FitACFStart.c</example>
</function>


<structure>
 <name>FitACFBadSample</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/badsmp.h</header>
 <struct>

    <member>
      <code>int nbad;</code>
      <description>Number of bad samples.</description>
    </member>

    <member>
      <code>int badsmp[MAXBAD];</code>
      <description>Array of bad samples.</description>
    </member>
</struct>

<description>
<p>The <sn href="structFitACFBadSample.html">struct FitACFBadSample</sn> structure stores an array of bad samples.</p>
</description>
</structure>

<structure>
 <name>FitBlock</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/fitblk.h</header>
 <struct>

   <member>
      <code><sn href="structFitPrm.html">struct FitPrm</sn> prm;</code>
      <description>Parameters used by the algorithm.</description>
    </member>

   <member>
      <code>struct complex *acfd[MAX_RANGE];</code>
      <description>An array of pointers to the raw ACF data.</description>
    </member>
    <member>
      <code>struct complex *xcfd[MAX_RANGE];</code>
      <description>An array of pointers to the raw XCF data.</description>
    </member>
</struct>

<description>
<p>The <sn href="structFitBlock.html">struct FitBlock</sn> structure stores the global parameters used by the <em>fitacf</em> algorithm.</p>
</description>
</structure>




<structure>
 <name>FitElv</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/fitblk.h</header>
 <struct>


   <member>
      <code>double normal;</code>
      <description>Angle of arrival estimate.</description>
    </member>
   
    <member>
      <code>double low;</code>
      <description>Lowest angle of arrival estimate.</description>
    </member>
 
  <member>
      <code>double high;</code>
      <description>Highest angle of arrival estimate.</description>
    </member>
</struct>

<description>
<p>The <sn href="structFitElv.html">struct FitElv</sn> structure stores the derived elevation angles.</p>
</description>
</structure>


<structure>
 <name>FitNoise</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/fitblk.h</header>
 <struct>


   <member>
      <code>double vel;</code>
      <description>Velocity found from fitting the noise ACF.</description>
    </member>
   
    <member>
      <code>double skynoise;</code>
      <description>Sky noise.</description>
    </member>
 
  <member>
      <code>double lag0;</code>
      <description>Lag zero power of the noise ACF.</description>
    </member>
</struct>

<description>
<p>The <sn href="structFitNoise.html">struct FitElv</sn> structure stores the derived noise values.</p>
</description>
</structure>




<structure>
 <name>FitPrm</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/fitblk.h</header>
 <struct>

    <member>
      <code>int channel;</code>
      <description>Channel number being processed, zero indicates data is from a mono radar, a value of (1) indicates channel A, and value of (2) indicates channel B.</description>
    </member>

 
    <member>
      <code>int offset;</code>
      <description>Offset between channels for a stereo radar.</description>
    </member>

    <member>
      <code>int cp;</code>
      <description>Control program Identifier number.</description>
    </member>

    <member>
      <code>int xcf;</code>
      <description>XCF flag.</description>
    </member>

    <member>
      <code>int tfreq;</code>
      <description>Transmitted frequency.</description>
    </member>

    <member>
      <code>int noise;</code>
      <description>Noise calculated from clear frequency search.</description>
    </member>


    <member>
      <code>int nrang;</code>
      <description>Number of ranges.</description>
    </member>

    <member>
      <code>int smsep;</code>
      <description>Sample separation (microseconds).</description>
    </member>


    <member>
      <code>int nave;</code>
      <description>Number of pulse sequences transmitted.</description>
    </member>

    <member>
      <code>int mplgs;</code>
      <description>Number of lags in ACF.</description>
    </member>


    <member>
      <code>int mppul;</code>
      <description>Number of pulses in sequence.</description>
    </member>

    <member>
      <code>int txpl;</code>
      <description>Transmit pulse length (microseconds).</description>
    </member>

    <member>
      <code>int lagfr;</code>
      <description>Lag to  first range (microseconds).</description>
    </member>

    <member>
      <code>int mppul;</code>
      <description>Number of pulses in sequence.</description>
    </member>


    <member>
      <code>int bmnum;</code>
      <description>Beam number.</description>
    </member>


    <member>
      <code>int lag[LAG_SIZE][2];</code>
      <description>Lag table.</description>
    </member>

    <member>
      <code>int pulse[PULSE_SIZE];</code>
      <description>Pulse table.</description>
    </member>

    <member>
      <code>int pwr0[MAX_RANGE];</code>
      <description>Lag-zero powers.</description>
    </member>

    <member>
      <code>double interfer[3];</code>
      <description>the x, y, z position of the interferometer array with respect to the main array. The values are given in meters. X is in the direction parallel to the main array, with +X being to the right looking along the boresite. Y is in the boresite direction, with +Y in front of the array. Z is the vertical displacement, with +Z being up.</description>           
    </member>

    <member>
      <code>double bmsep;</code>
      <description>Beam separation angle.</description>
    </member>

    <member>
      <code>double phidiff;</code>
      <description>Sign of the phase shift of the interferometer array (+1 indicates the inteferometer is in front of the main array).</description>
    </member>

    <member>
      <code>double tdiff;</code>
      <description>Time delay in microseconds of the signal from the interferometer array and the main array.</description>
    </member>

    <member>
      <code>double vdir;</code>
      <description>Definition of velocity direction. (+1.0 is normal, -1.0 indicates that the I & Q inputs to the receiver are reversed).</description>
    </member>

</struct>

<description>
<p>The <sn href="structFitPrm.html">struct FitPrm</sn> structure stores the parameters used by the <em>fitacf</em> algorithm.</p>
</description>
</structure>



<structure>
 <name>FitRange</name>
 <location>src.lib/superdarn/fit</location>
 <header>superdarn/fitblk.h</header>
 <struct>


   <member>
      <code>double v;</code>
      <description>Velocity from ACF.</description>
    </member>
   
    <member>
      <code>double v_err;</code>
      <description>Velocity error from ACF.</description>
    </member>
 
    <member>
      <code>double p_0;</code>
      <description>Lag zero power.</description>
    </member>

    <member>
      <code>double p_l;</code>
      <description>Power from lambda fit of ACF.</description>
    </member>

    <member>
      <code>double p_l_err;</code>
      <description>Power error from lambda fit of ACF.</description>
    </member>

   <member>
      <code>double p_s;</code>
      <description>Power from sigma fit of ACF.</description>
    </member>


    <member>
      <code>double p_s_err;</code>
      <description>Power error from sigma fit of ACF.</description>
    </member>

   <member>
      <code>double w_l;</code>
      <description>Spectral width from lambda fit of ACF.</description>
    </member>

    <member>
      <code>double w_l_err;</code>
      <description>Spectral width error from lambda fit of ACF.</description>
    </member>

    <member>
      <code>double w_s;</code>
      <description>Spectral width from sigma fit of ACF.</description>
    </member>


    <member>
      <code>double w_s_err;</code>
      <description>Spectral width error from sigma fit of ACF.</description>
    </member>

   <member>
      <code>double phi0;</code>
      <description>Phase determination at lag zero of the ACF.</description>
    </member>

    <member>
      <code>double phi0_err;</code>
      <description>Phase determination error at lag zero of the ACF.</description>
    </member>

    <member>
      <code>double sdev_l;</code>
      <description>Standard deviation of lambda fit.</description>
    </member>

    <member>
      <code>double sdev_s;</code>
      <description>Standard deviation of sigma fit .</description>
    </member>

    <member>
      <code>double sdev_phi;</code>
      <description>Standard deviation of phase fit.</description>
    </member>

    <member>
      <code>int qflg;</code>
      <description>Quality flag.</description>
    </member>

    <member>
      <code>int gsct;</code>
      <description>Ground scatter flag.</description>
    </member>

    <member>
      <code>int nump;</code>
      <description>Number of points in the fit.</description>
    </member>



</struct>

<description>
<p>The <sn href="structFitRange.html">struct FitRange</sn> structure stores the fitted parameters for a single range.</p>
</description>
</structure>


</library>
